public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        
        if(m== 1 && n == 1){
            if(matrix[0][0] == target)
                return true;
            else
                return false;
        }
        boolean result = false;
        int start = 0;
        int end = m-1;
        int mid = start + (end - start)/2;
        
        if(m == 1)
            return binarySearch(matrix[0], 0, n-1, target);
        
        while(start<end){
            mid = start + (end - start)/2;
            
            if(matrix[mid][0] <= target && matrix[mid][n-1]>=target)
                return binarySearch(matrix[mid], 0, n-1, target);
            
            if(matrix[mid][0] < target){
                start = mid +1;
            }else{
                end = mid;
            }
        }

        return binarySearch(matrix[start], 0, n-1, target);
    }
        
     public boolean binarySearch(int[] array, int start, int end, int target){
         int mid = start + ((end-start)/2);
      
      if(array[mid] == target)
        return true;
             
      while(start<end){   
         if(array[mid]>target){
             end = mid;
             return binarySearch(array, start, end, target);
         }else{
             start = mid + 1;
             return binarySearch(array, start, end, target);
         }
     }
     
     return false;
         
    }
}
